/*
1. Monkey Banana Problem.
There is a monkey at the door into a room. In the middle of the room a banana
is hanging from the ceiling. The monkey is hungry and wants to get the banana,
but he cannot stretch high enough from the floor. At the window of the room
there is a box that the monkey can use. The monkey can perform the following
actions: walk on the floor, climb the box, push the box around (if he is already
at it), and grasp the banana if he is standing on the box and directly
underneath the banana.
a) Can the monkey grasp the banana?
b) How can the monkey grasp the banana?
Answer the questions by writing a Prolog Program.
*/

% state(PositionInRoom, PositionOfBox, PositionOnBox, HasBanana)
%
% grasp
move(state(middle, middle, on, no), grasp, state(middle, middle, on, yes)).
% climb box
move(state(X, X, off, no), climb_box, state(X, X, on, no)).
% push box
move(state(X, X, off, no), push_box(X,Y), state(Y, Y, off, no)).
% move around
move(state(X, PositionOfBox, off, no), walk(X,Y), state(Y, PositionOfBox, off, no)).
monkey_gets_banana(state(_, _, _, yes), []).
monkey_gets_banana(state(PositionInRoom, PositionOfBox, PositionOnBox, HasBanana),
[Action|Moves]):-
move(state(PositionInRoom, PositionOfBox, PositionOnBox, HasBanana), Action, NewState),
monkey_gets_banana(NewState, Moves).
can_monkey_get_banana(state(PositionInRoom, PositionOfBox, PositionOnBox, HasBanana)):-
monkey_gets_banana(state(PositionInRoom, PositionOfBox, PositionOnBox, HasBanana),
Moves),
write(Moves).

/*
2. Water Jug Problem.
There are two water jugs with capacities of 4 litres and 3 litres respectively.
Neither have any measuring markers on them. The water jugs are both initially
empty. One can fill the water jugs with water completely or partially. One can
empty completely or partially filled jugs both completely or partially. One can
transfer the content (water) of one jug (partially or completely} to another jug.
Write Prolog program that outputs the steps to get exactly 2 litres of water
in 4 litres jug
*/

min(X,Y,X):-
X < Y,!.
min(X,Y,Y).
% state(AmountIn4L, AmountIn3L)
%
% empty 4L
move(state(X,4), state(X,0)):-
write(state(X,4)),write('-->'),write(state(X,0)),nl.
% pour from 3L to 4L as much as possible
move(state(X,Y), state(W,Z)):-
X > 0,
Y < 4,
Y1 is 4-Y,
min(X,Y1,T),
W is X-T,
Z is Y+T,
write(state(X,Y)),write('-->'),write(state(W,Z)),nl.
% make 3L full
move(state(X,Y), state(3,Y)):-
X < 3,
write(state(X,Y)),write('-->'),write(state(3,Y)),nl.
get_2L(state(0,2)).
get_2L(state(X,Y)):-
move(state(X,Y), state(W,Z)),
get_2L(state(W,Z)).

/*
3. Missionaries and Cannibals Problem.
Three missionaries and three cannibals must cross a river using a boat which
can carry at most two people, under the constraint that, for both banks, if
there are missionaries present on the bank, they cannot be outnumbered by
cannibals (if they were, the cannibals would eat the missionaries). The boat
cannot cross the river by itself with no people on board. Write a Prolog
program to write the steps to illustrate how can missionaries and cannibals
can cross the river?
*/

no_eat(0,C):-!.
no_eat(M,C):-
M >= C.
% state(MissionariesOnLeftBank, CannibalsOnLeftBank,
% MissionariesOnRightBank, CannibalsOnRightBank, BoatWhichBank)
%
% two missionaries go from left to right
move(state(A,B,C,D,left),state(A1,B,C1,D,right)):-
A >= 2,
A1 is A-2,
C1 is C+2,
no_eat(A1,B),
no_eat(C1,D),
write(state(A,B,C,D,left)-->state(A1,B,C1,D,right)),
write(' two missionaries go from left to right\n').
% two cannibals go from left to right
move(state(A,B,C,D,left),state(A,B1,C,D1,right)):-
B >= 2,
B1 is B-2,
D1 is D+2,
no_eat(A,B1),
no_eat(C,D1),
write(state(A,B,C,D,left)-->state(A,B1,C,D1,right)),
write(' two cannibals go from left to right\n').
% one missionary and one cannibal go from left to right
move(state(A,B,C,D,left),state(A1,B1,C1,D1,right)):-
A >= 1,
B >= 1,
A1 is A-1,
B1 is B-1,
C1 is C+1,
D1 is D+1,
no_eat(A1,B1),
no_eat(C1,D1),
write(state(A,B,C,D,left)-->state(A1,B1,C1,D1,right)),
write(' one missionary and one cannibal go from left to right\n').
% one cannibal goes from right to left
move(state(A,B,C,D,right),state(A,B1,C,D1,left)):-
D >= 1,
B1 is B+1,
D1 is D-1,
no_eat(A,B1),
no_eat(C,D1),
write(state(A,B,C,D,right)-->state(A,B1,C,D1,left)),
write(' one cannibal goes from right to left\n').% one missionary goes from right to left
move(state(A,B,C,D,right),state(A1,B,C1,D,left)):-
C >= 1,
A1 is A+1,
C1 is C-1,
no_eat(A1,B),
no_eat(C1,D),
write(state(A,B,C,D,right)-->state(A1,B,C1,D,left)),
write(' one missionary goes from right to left\n').
% one missionary and one cannibal go from right to left
move(state(A,B,C,D,right),state(A1,B1,C1,D1,left)):-
C >= 1,
D >= 1,
A1 is A+1,
B1 is B+1,
C1 is C-1,
D1 is D-1,
no_eat(A1,B1),
no_eat(C1,D1),
write(state(A,B,C,D,right)-->state(A1,B1,C1,D1,left)),
write(' one missionary and one cannibal go from right to left\n').
cross_safely(state(0,0,3,3,right)).
cross_safely(state(A,B,C,D,Bank)):-
move(state(A,B,C,D,Bank),state(A1,B1,C1,D1,Bank1)),
cross_safely(state(A1,B1,C1,D1,Bank1)).

/*
4. Tiger, Goat and Cabbage Problem.
A farmer is traveling with a tiger, a goat, and a cabbage. We have no idea why
he would be travelling with such a strange assortment, but there he is anyway.
At one point in his journey he comes to a river which is too deep to wade
across, and too wide to swim across so he is in a quandary on how to continue.
He notices a small boat tied to the near shore, but the boat is too small to fit all
his belongings into, but it is large enough so that he can safely row across with
one belonging at a time.
The problem is that if he rows across with the tiger first, then the goat will eat
the cabbage, and if he rows across with the cabbage first, the tiger will eat the
goat.
How can he safely cross the river with all his things intact? Write a Prolog
program to illustrate the steps.
*/

% state(TigerPos, GoatPos, CabbagePos, FarmerBoatPos)
%
% take no one from right to left
move(state(T, G, C, right), state(T, G, C, left)):-
T \= G,
G \= C,
write(state(T, G, C, right)-->state(T, G, C, left)),
write(' Take no one from right to left\n').
% take cabbage from left to right
move(state(T, G, left, left), state(T, G, right, right)):-
T \= G,
write(state(T, G, left, left)-->state(T, G, right, right)),
write(' Take cabbage from left to right\n').
% take tiger from left to right
move(state(left, G, C, left), state(right, G, C, right)):-
G \= C,
write(state(left, G, C, left)-->state(right, G, C, right)),
write(' Take tiger from left to right\n').
% take goat from left to right
move(state(T, left, C, left), state(T, right, C, right)):-
write(state(T, left, C, left)-->state(T, right, C, right)),
write(' Take goat from left to right\n').
% take goat from right to left
move(state(T, right, C, right), state(T, left, C, left)):-
write(state(T, right, C, right)-->state(T, left, C, left)),
write(' Take goat from right to left\n').
find_way_to_cross(state(right, right, right, right)):-!.
find_way_to_cross(state(T,G,C,F)):-
move(state(T,G,C,F), state(T1,G1,C1,F1)),
find_way_to_cross(state(T1,G1,C1,F1)).